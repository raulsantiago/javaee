jakarta.validation.constraints.AssertFalse.message = deve ser falso
jakarta.validation.constraints.AssertTrue.message = deve ser verdadeiro
jakarta.validation.constraints.DecimalMax.message = deve ser menor que $ {inclusive == true? 'ou igual a': ''} {value}
jakarta.validation.constraints.DecimalMin.message = deve ser maior que $ {inclusive == true? 'ou igual a': ''} {value}
jakarta.validation.constraints.Digits.message = valor numérico fora dos limites (<número inteiro} dígitos>. <{fração} dígitos> esperado)
jakarta.validation.constraints.Email.message = deve ser um endereço de email bem formado
jakarta.validation.constraints.Future.message = deve ser uma data futura
jakarta.validation.constraints.FutureOrPresent.message = deve ser uma data no presente ou no futuro
jakarta.validation.constraints.Max.message = deve ser menor ou igual a {value}
jakarta.validation.constraints.Min.message = deve ser maior que ou igual a {value}
jakarta.validation.constraints.Negative.message = deve ser menor que 0
jakarta.validation.constraints.NegativeOrZero.message = deve ser menor ou igual a 0
jakarta.validation.constraints.NotBlank.message = não deve ficar em branco
jakarta.validation.constraints.NotEmpty.message = não deve estar vazio
jakarta.validation.constraints.NotNull.message = não deve ser nulo
jakarta.validation.constraints.Null.message = deve ser nulo
jakarta.validation.constraints.Past.message = deve ser uma data anterior
jakarta.validation.constraints.PastOrPresent.message = deve ser uma data no passado ou no presente
jakarta.validation.constraints.Pattern.message = deve corresponder a "{regexp}"
jakarta.validation.constraints.Positive.message = deve ser maior que 0
jakarta.validation.constraints.PositiveOrZero.message = deve ser maior que ou igual a 0
jakarta.validation.constraints.Size.message = size deve estar entre {min} e {max}

org.hibernate.validator.constraints.CreditCardNumber.message = número do cartão de crédito inválido
org.hibernate.validator.constraints.Currency.message = moeda inválida (deve ser um de {value})
org.hibernate.validator.constraints.EAN.message = código de barras {type} inválido
org.hibernate.validator.constraints.Email.message = não é um endereço de email bem formado
org.hibernate.validator.constraints.ISBN.message = ISBN inválido
org.hibernate.validator.constraints.Length.message = o tamnaho deve estar entre {min} e {max}
org.hibernate.validator.constraints.CodePointLength.message = length deve estar entre {min} e {max}
org.hibernate.validator.constraints.LuhnCheck.message = o dígito de verificação para $ {validatedValue} é inválido, a soma de verificação Luhn Modulo 10 falhou
org.hibernate.validator.constraints.Mod10Check.message = o dígito de verificação para $ {validatedValue} é inválido, a soma de verificação do Módulo 10 falhou
org.hibernate.validator.constraints.Mod11Check.message = o dígito de verificação para $ {validatedValue} é inválido, a soma de verificação do Módulo 11 falhou
org.hibernate.validator.constraints.ModCheck.message = o dígito de verificação para $ {validatedValue} é inválido, a soma de verificação {modType} falhou
org.hibernate.validator.constraints.NotBlank.message = pode não estar vazio
org.hibernate.validator.constraints.NotEmpty.message = pode não estar vazio
org.hibernate.validator.constraints.ParametersScriptAssert.message = a expressão de script "{script}" não foi avaliada como verdadeira
org.hibernate.validator.constraints.Range.message = deve estar entre {min} e {max}
org.hibernate.validator.constraints.SafeHtml.message = pode ter conteúdo html não seguro
org.hibernate.validator.constraints.ScriptAssert.message = a expressão de script "{script}" não foi avaliada como verdadeira
org.hibernate.validator.constraints.UniqueElements.message = deve conter apenas elementos exclusivos
org.hibernate.validator.constraints.URL.message = deve ser um URL válido

org.hibernate.validator.constraints.br.CNPJ.message = número de registro de contribuinte brasileiro (CNPJ) inválido
org.hibernate.validator.constraints.br.CPF.message = número de registro de contribuinte individual (CPF) brasileiro inválido
org.hibernate.validator.constraints.br.TituloEleitoral.message = número do cartão de identificação de eleitor brasileiro inválido

org.hibernate.validator.constraints.pl.REGON.message = número de identificação de contribuinte polonês inválido (REGON)
org.hibernate.validator.constraints.pl.NIP.message = NIP (Número de identificação IVA) inválido
org.hibernate.validator.constraints.pl.PESEL.message = número de identificação nacional polonês (PESEL) inválido

org.hibernate.validator.constraints.time.DurationMax.message = deve ser menor que $ {inclusive == true? 'ou igual a': ''} $ {days == 0? '': dias == 1? '1 dia': '' + = dias + = 'dias'} $ {hours == 0? '': horas == 1? '1 hora': '' + = horas + = 'horas'} $ {minutes == 0? '': minutos == 1? '1 minuto': '' + = minutos + = 'minutos'} $ {seconds == 0? '': segundos == 1? '1 segundo': '' + = segundos + = 'segundos'} $ {millis == 0? '': milis == 1? '1 milli': '' + = millis + = 'millis'} $ {nanos == 0? '': nanos == 1? '1 nano': '' + = nanos + = 'nanos'}
org.hibernate.validator.constraints.time.DurationMin.message = deve ser maior que $ {inclusive == true? 'ou igual a': ''} $ {days == 0? '': dias == 1? '1 dia': '' + = dias + = 'dias'} $ {hours == 0? '': horas == 1? '1 hora': '' + = horas + = 'horas'} $ {minutes == 0? '': minutos == 1? '1 minuto': '' + = minutos + = 'minutos'} $ {seconds == 0? '': segundos == 1? '1 segundo': '' + = segundos + = 'segundos'} $ {millis == 0? '': milis == 1? '1 milli': '' + = millis + = 'millis'} $ {nanos == 0? '': nanos == 1? '1 nano': '' + = nanos + = 'nanos'}